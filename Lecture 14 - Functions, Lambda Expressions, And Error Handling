
#Simple Function
def add_numbers(a,b):
  return a+b

print(add_numbers(2,3))

#Function with default argument
def greet(name,message="Hello"):
  return f"{message},{name}!"

print(greet("Alice"))
print(greet("Bob","Hi"))

#Function with variable length argument
def add_numbers(*args):
  return sum(args)

print(add_numbers(1,2,3,4,5))

#Function with keyword arguments
def display_info(**kwargs):
  for key,value in kwargs.items():
    print(f"{key} : {value}")

display_info(name="Alice",age=30,city="New York")
     
name : Alice
age : 30
city : New York

#Higher Order Function
def apply_function(func,a,b):
  return func(a,b)

def multiply(a,b):
  return a*b

apply_function(multiply,2,3)
     
6
Lambda Expressions

Definition: Lambda expressions, also known as anonymous functions, are small, unnamed functions defined using the "lambda" keyword. They are often used for short, throwaway functions.

Use Case in Real Life: Lambda expressions are commonly used in sorting algorithms where a custom sorting key is needed. For example, sorting a list of tuples by the second element can be achieved using a lambda function.


#Simple Lambda Function
square = lambda x : x * x

print(square(5))
     
25

#Lambda function in `map`
numbers = [1,2,3,4,5,6]
squares = list(map(lambda x : x*x,numbers))


print(squares)
     
[1, 4, 9, 16, 25, 36]

#Lambda function in `filter`
numbers = [1,2,3,4,5,6]
even_numbers = list(filter(lambda x : x %2 == 0, numbers))

print(even_numbers)
     
[2, 4, 6]

#Lambda function in `sorted`
students = [("Alice",25) , ("Bob",20) , ("Charlie",23)]
soretd_students = sorted(students , key = lambda student : student[1])

print(soretd_students)
     
[('Bob', 20), ('Charlie', 23), ('Alice', 25)]
Error Handling

Definition: Error handling in Python is done using try, except, else, and finally blocks. It allows you to handle exceptions gracefully and ensure that the program continues to run.

Use Case in Real Life: Error handling is crucial in web applications to handle unexpected situations, such as database connection errors or invalid user inputs. Proper error handling ensures that the application can provide meaningful error messages to users and recover from errors without crashing


#Basic Try-Except Block
try:
  #Code that my raise an exception
  result = 10 / 0
except ZeroDivisionError :
  #Code to handle the exception
  print("Cannot divide by zero")
     
Cannot divide by zero

#Basic Try-Except-Else Block
try:
  #Code that my raise an exception
  result = 10 / 2
except ZeroDivisionError :
  #Code to handle the exception
  print("Cannot divide by zero")
else:
  #Code to execute if no exception is raised
  print("Division Successful!")
     
Division Successful!

#Try - Except - Finally Block
try:
  #Code that my raise an exception
  result = 10 / 0
except ZeroDivisionError :
  #Code to handle the exception
  print("Cannot divide by zero")
finally:
  #Code to execute regardless of exception
  print("Division Successful!")
     
Cannot divide by zero
Division Successful!

#Handling Multiple Exceptions
try:
  #Code that my raise an exception
  number = int(input("Enter the number: "))
  result = 10/number
except ValueError:
  #Code to handle exception
  print("Invalid Input !")
except ZeroDivisionError:
  #Code to handle exception
  print("Cannot divide by zero")

     
Enter the number: 0
Cannot divide by zero

#Raising Exception
def check_positive(number):
  if number <= 0 :
    raise ValueError("Number must be positive")

try:
  check_positive(-5)
except ValueError as e:
  print(e)

     
